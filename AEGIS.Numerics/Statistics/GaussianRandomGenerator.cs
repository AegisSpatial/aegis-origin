/// <copyright file="GaussianRandomGenerator.cs" company="Eötvös Loránd University (ELTE)">
///     Copyright (c) 2011-2016 Roberto Giachetta. Licensed under the
///     Educational Community License, Version 2.0 (the "License"); you may
///     not use this file except in compliance with the License. You may
///     obtain a copy of the License at
///     http://opensource.org/licenses/ECL-2.0
///
///     Unless required by applicable law or agreed to in writing,
///     software distributed under the License is distributed on an "AS IS"
///     BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
///     or implied. See the License for the specific language governing
///     permissions and limitations under the License.
/// </copyright>
/// <author>István Tiboldi</author>

using System;

namespace ELTE.AEGIS.Numerics.Statistics
{
    /// <summary>
    /// Represents a random number generator using a Gaussian (normal) distribution.
    /// </summary>
    /// <remarks>
    /// This type uses the polar form of the Box-Muller transformation to create values with Gaussian distribution from values generated by the default random generator.
    /// </remarks>
    public class GaussianRandomGenerator : Random
    {
        #region Private fields

        /// <summary>
        /// A value indicating whether the next number is available.
        /// </summary>
        private Boolean _available;

        /// <summary>
        /// The next generated number.
        /// </summary>
        private Double _nextGauss;

        /// <summary>
        /// The random generator.
        /// </summary>
        private Random _generator;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="GaussianRandomGenerator" /> class.
        /// </summary>
        public GaussianRandomGenerator()
            : this (new Random())
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GaussianRandomGenerator" /> class.
        /// </summary>
        /// <param name="random">The underlying random generator.</param>
        /// <exception cref="System.ArgumentNullException">The random generator is null.</exception>
        public GaussianRandomGenerator(Random random)
        {
            if (random == null)
                throw new ArgumentNullException("random", "The random generator is null.");

            _generator = random;
        }

        #endregion

        #region Public Random methods

        public override Int32 Next()
        {
            return (Int32)(Sample() * ((Int64)Int32.MaxValue + 1));
        }
        
        public override Int32 Next(Int32 minValue, Int32 maxValue)
        {
            Int64 range = (Int64)(maxValue - minValue) / 2;

            return (Int32)(Sample() * range + minValue + range);
        }

        public override void NextBytes(Byte[] buffer)
        {
            for (Int32 i = 0; i < buffer.Length; i++)
            {
                buffer[i] = (Byte)(Sample() * 128);
            }
        }

        #endregion

        #region Public methods

        /// <summary>
        /// Returns a random number based on the median and standard deviation.
        /// </summary>
        /// <param name="median">The median.</param>
        /// <param name="standardDeviation">The standard deviation.</param>
        /// <returns>The generated number.</returns>
        public Double NextDouble(Double median, Double standardDeviation)
        {
            return median + standardDeviation * NextDouble();
        }

        /// <summary>
        /// Returns a random number based on the standard deviation.
        /// </summary>
        /// <param name="standardDeviation">The standard deviation.</param>
        /// <returns>The generated number.</returns>
        public Double NextDouble(Double standardDeviation)
        {
            return standardDeviation * NextDouble();
        }

        #endregion

        #region Protected Random methods

        protected override double Sample()
        {
            if (_available)
            {
                _available = false;
                return _nextGauss;
            }

            Double u, v, s;
            do
            {
                u = 2 * _generator.NextDouble() - 1;
                v = 2 * _generator.NextDouble() - 1;

                s = u * u + v * v;
            }
            while (s == 0 || s >= 1);

            s = Math.Sqrt(-2 * Math.Log(s) / s);

            _nextGauss = v * s;
            _available = true;

            return u * s;
        }

        #endregion

    }
}
